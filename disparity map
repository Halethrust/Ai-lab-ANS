import cv2

# Load left and right images (stereo pair)
left_img = cv2.imread('left.jpeg', 0)  # Grayscale image
right_img = cv2.imread('right.jpeg', 0)  # Grayscale image

# Create a StereoSGBM object
stereo = cv2.StereoSGBM_create(
    minDisparity=0,
    numDisparities=16,  # Range of disparities to search for
    blockSize=9,  # Matched block size. It must be an odd number >=1
    P1=8 * 1 * 9 ** 2,  # Penalty parameter for the disparity smoothness term
    P2=32 * 1 * 9 ** 2,  # Penalty parameter for the disparity smoothness term
    disp12MaxDiff=1,  # Maximum allowed difference (in integer pixel units) in the left-right disparity check
    preFilterCap=63,  # Truncation value for the prefiltered image pixels
    uniquenessRatio=10,  # Margin in percentage by which the best (minimum) computed cost function value should "win" the second best value to consider the found match correct.
    speckleWindowSize=100,  # Maximum size of smooth disparity regions to consider their noise speckles and invalidate the disparity check
    speckleRange=32,  # Maximum disparity variation within each connected component
    mode=cv2.STEREO_SGBM_MODE_HH  # Mode of operation
)

# Compute the disparity map
disparity = stereo.compute(left_img, right_img)

# Normalize the disparity map for display
disparity_normalized = cv2.normalize(disparity, None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)

# Display images
cv2.imshow('Disparity Map', disparity_normalized)
cv2.imshow('Left Image', left_img)
cv2.imshow('Right Image', right_img)
cv2.waitKey(0)
cv2.destroyAllWindows()
