import cv2
import numpy as np

# PLY header template
ply_header = '''ply
format ascii 1.0
element vertex %(vert_num)d
property float x
property float y
property float z
property uchar red
property uchar green
property uchar blue
end_header'''

# Function to write PLY file
def write_ply(fn, verts, colors):
    verts = verts.reshape(-1, 3)
    colors = colors.reshape(-1, 3)
    verts = np.hstack([verts, colors])
    with open(fn, 'wb') as f:
        f.write((ply_header % dict(vert_num=len(verts))).encode('utf-8'))
        np.savetxt(f, verts, fmt='%f %f %f %d %d %d ')

def main():
    print('loading images...')
    # Read stereo images
    left_img = cv2.imread('left.jpeg', 0)
    right_img = cv2.imread('right.jpeg', 0)

    # Compute stereo disparity
    window_size = 3
    min_disp = 16
    num_disp = 112 - min_disp
    stereo = cv2.StereoSGBM_create(
        minDisparity=min_disp,
        numDisparities=num_disp,
        blockSize=16,
        P1=8 * 3 * window_size ** 2,
        P2=32 * 3 * window_size ** 2,
        disp12MaxDiff=1,
        uniquenessRatio=10,
        speckleWindowSize=100,
        speckleRange=32
    )
    print('computing disparity...')
    disp = stereo.compute(left_img, right_img).astype(np.float32) / 16.0

    # Generate 3D point cloud
    h, w = left_img.shape[:2]
    f = 0.8 * w  # Guess for focal length
    Q = np.float32([[1, 0, 0, -0.5 * w],
                    [0, -1, 0, 0.5 * h],  # Turn points 180 deg around x-axis,
                    [0, 0, 0, -f],  # so that y-axis looks up
                    [0, 0, 1, 0]])
    points = cv2.reprojectImageTo3D(disp, Q)
    colors = cv2.cvtColor(left_img, cv2.COLOR_GRAY2RGB)
    mask = disp > disp.min()
    out_points = points[mask]
    out_colors = colors[mask]

    # Save point cloud as PLY file
    out_fn = 'point_cloud.ply'
    write_ply(out_fn, out_points, out_colors)
    print('%s saved' % out_fn)

    # Normalize the disparity map for display
    disparity_normalized = cv2.normalize(disp, None, alpha=0, beta=255,
                                         norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)

    # Display the disparity map
    cv2.imshow('Disparity Map', disparity_normalized)
    cv2.imshow('left image', left_img)
    cv2.imshow('right image', right_img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
