A* algorithm and Dijkstra’s algorithm:
in ros:

$ git clone https://github.com/atomoclast/realitybytes_blogposts.git 
home/realitybytes_blogposts/pathplanning/ 
$ python a_star.py 
Test_grid variable is designed as a list of lists where ‘0’ indicates an open node and ‘1’ indicates an 
obstacle: 
code:
test_grid = [[0, 0, 0, 0, 0, 0],
             [0, 1, 1, 1, 1, 0],
             [0, 1, 0, 0, 0, 0],
             [0, 1, 0, 0, 0, 0],
             [0, 1, 0, 0, 0, 0],
             [0, 1, 0, 0, 0, 0],
             [0, 1, 0, 0, 0, 0],
             [0, 1, 0, 0, 1, 0]]

for i in range(len(delta)):
    x2 = x + delta[i][0]
    y2 = y + delta[i][1]
    if len(self.grid) > x2 >= 0 <= y2 < len(self.grid[0]):
        if closed[x2][y2] == 0 and self.grid[x2][y2] == 0:
            g2 = g + cost
            f = g2 + self.heuristic[x2][y2]
            open.append([f, g2, x2, y2])
            closed[x2][y2] = 1
            delta_tracker[x2][y2] = i



https://realitybytes.blog/2018/08/17/graph-based-path-planning-a/amp/

https://github.com/SakshayMahna/Robotics-Playground/tree/main/turtlebot3_ws. (simulation)
