A) image
import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt

# Read the query image (img1) and the train image (img2)
img1 = cv.imread('img3.jpg', cv.IMREAD_GRAYSCALE)  # queryImage
img2 = cv.imread('img3_rot.jpg', cv.IMREAD_GRAYSCALE)  # trainImage

# Initiate ORB detector
orb = cv.ORB_create()

# Find the keypoints and descriptors with ORB for both images
kp1, des1 = orb.detectAndCompute(img1, None)
kp2, des2 = orb.detectAndCompute(img2, None)

# BFMatcher with default parameters
bf = cv.BFMatcher()

# KNN match the descriptors
matches = bf.knnMatch(des1, des2, k=2)

# Apply ratio test
good = []
for m, n in matches:
    if m.distance < 0.75 * n.distance:
        good.append([m])

# cv.drawMatchesKnn expects list of lists as matches.
img3 = cv.drawMatchesKnn(img1, kp1, img2, kp2, good, None, flags=cv.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)

# Display the result
plt.imshow(img3), plt.show()

# Close all OpenCV windows
cv.destroyAllWindows()

B)Video
import cv2 as cv
import matplotlib.pyplot as plt

# Read the train image (template)
img2 = cv.imread('s_img.jpg', cv.IMREAD_GRAYSCALE)

# Initiate ORB detector
orb = cv.ORB_create()

# Find the keypoints and descriptors for the train image (template)
kp2, des2 = orb.detectAndCompute(img2, None)

# define a video capture object
vid = cv.VideoCapture('s_vid.mp4')

while (True):
    # Capture the video frame by frame
    ret, img1 = vid.read() 
    
    if not ret:
        break  # Break the loop if there's no more frames
    
    # Convert the frame to grayscale
    img1_gray = cv.cvtColor(img1, cv.COLOR_BGR2GRAY)
    
    # find the keypoints and descriptors with ORB for the video frame
    kp1, des1 = orb.detectAndCompute(img1_gray, None)
    
    # Create a BFMatcher object
    bf = cv.BFMatcher()
    
    # Match descriptors
    matches = bf.knnMatch(des1, des2, k=2)
    
    # Apply ratio test
    good = []
    for m, n in matches:
        if m.distance < 0.75 * n.distance:
            good.append([m])
    
    # Draw matches
    img3 = cv.drawMatchesKnn(img1_gray, kp1, img2, kp2, good, None, flags=cv.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
    
    # Display the result
    plt.imshow(img3)
    plt.show()
    
    # Close the window if 'q' is pressed
    if cv.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and close all windows
vid.release()
cv.destroyAllWindows()
