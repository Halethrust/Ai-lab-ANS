pub:
#!/usr/bin/env python3
import rospy  # Python library for ROS
from sensor_msgs.msg import Image  # Image is the message type
from cv_bridge import CvBridge  # Package to convert between ROS and OpenCV Images
import cv2  # OpenCV library

def publish_message():
    pub = rospy.Publisher('video_frames', Image, queue_size=10)
    rospy.init_node('video_pub_py', anonymous=True)
    rate = rospy.Rate(10)  # 10hz
    cap = cv2.imread('/home/rae/Downloads/test.png', 0)
    br = CvBridge()
    while not rospy.is_shutdown():
        if True:
            rospy.loginfo('publishing video frame')
            pub.publish(br.cv2_to_imgmsg(cap))
            rate.sleep()

if __name__ == '__main__':
    try:
        publish_message()
    except rospy.ROSInterruptException:
        pass

sub:
#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2

def callback(data):
    br = CvBridge()
    rospy.loginfo("Receiving video frame")
    current_frame = br.imgmsg_to_cv2(data)
    current_frame = cv2.circle(current_frame, (60, 60), 10, (0, 255, 255), -1)
    current_frame = cv2.rotate(current_frame, cv2.ROTATE_90_CLOCKWISE)
    cv2.imshow("camera", current_frame)
    cv2.waitKey(1)

def receive_message():
    rospy.init_node('video_sub_py', anonymous=True)
    rospy.Subscriber('video_frames', Image, callback)
    rospy.spin()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    receive_message()
